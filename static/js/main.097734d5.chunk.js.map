{"version":3,"sources":["components/pages/game/GamePad.js","components/pages/game/ButtonPanel.js","components/pages/game/Game.js","App.js","serviceWorker.js","index.js"],"names":["memo","props","moveUp","moveDown","moveLeft","moveRight","handleClick","e","fn","stopPropagation","className","onClick","onTouchEnd","style","display","justifyContent","paddingTop","togglePause","isPaused","type","setTimeout","winHeight","window","innerHeight","bodyHeight","document","body","offsetHeight","transform","overflow","boardWidth","innerWidth","cellWidth","boardHeight","actionTypes","cells","y","x","id","cell","top","left","DIRECTION","ALLOWED_TURNS","initState","snake","direction","food","isAlive","reducer","state","action","payload","headCell","newHeadCellID","newSnake","includes","alert","allCells","occupiedCells","emptyID","randomIndex","Math","floor","random","length","getAnEmptyCellID","Object","keys","pop","unshift","Game","useReducer","gameState","dispatch","gameLoop","useCallback","useEffect","move","_","throttle","width","height","values","map","c","data-id","key","clsx","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.097734d5.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\n\r\nconst GamePad = props => {\r\n    const { moveUp, moveDown, moveLeft, moveRight } = props\r\n\r\n    const handleClick = (e, fn) => {\r\n        e.stopPropagation()\r\n        fn()\r\n    }\r\n\r\n    return (\r\n        <div className=\"gamepad\">\r\n            <div className=\"group left\">\r\n                <i className=\"fas fa-chevron-up up ico\" \r\n                    onClick={e => handleClick(e, moveUp)} \r\n                    onTouchEnd={e => handleClick(e, moveUp)}\r\n                ></i>\r\n                <i className=\"fas fa-chevron-left left ico\" \r\n                    onClick={e => handleClick(e, moveLeft)} \r\n                    onTouchEnd={e => handleClick(e, moveLeft)}\r\n                ></i>\r\n                <i className=\"fas fa-chevron-down down ico\" \r\n                    onClick={e => handleClick(e, moveDown)} \r\n                    onTouchEnd={e => handleClick(e, moveDown)}\r\n                ></i>\r\n            </div>\r\n            \r\n            <div className=\"group right\">\r\n                <i className=\"fas fa-chevron-up up ico\" \r\n                    onClick={e => handleClick(e, moveUp)} \r\n                    onTouchEnd={e => handleClick(e, moveUp)}\r\n                ></i>\r\n                <i className=\"fas fa-chevron-right right ico\" \r\n                    onClick={e => handleClick(e, moveRight)} \r\n                    onTouchEnd={e => handleClick(e, moveRight)}\r\n                ></i>\r\n                <i className=\"fas fa-chevron-down down ico\" \r\n                    onClick={e => handleClick(e, moveDown)} \r\n                    onTouchEnd={e => handleClick(e, moveDown)}\r\n                ></i>\r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default memo(GamePad)","import React, { memo } from 'react'\r\n\r\nconst style = {\r\n    // borderTop: '2px solid deepskyblue',\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    paddingTop: 1\r\n}\r\n\r\nconst ButtonPanel = props => {\r\n    const { togglePause, isPaused } = props\r\n\r\n    return (\r\n        <div className=\"btn-panel\" style={style}>\r\n            <button type=\"button\" onClick={togglePause} className=\"btn btn-primary\">\r\n                {isPaused && 'PLAY'}\r\n                {!isPaused && 'PAUSE'}\r\n            </button>\r\n            {/* <button type=\"button\" className=\"btn btn-danger\">\r\n                RESTART\r\n            </button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(ButtonPanel)","import React, { useEffect, useReducer, useCallback } from 'react'\r\nimport clsx from 'clsx'\r\nimport _ from 'lodash'\r\nimport GamePad from './GamePad'\r\nimport ButtonPanel from './ButtonPanel'\r\n\r\n/**\r\n * Scale height to adjust visible window\r\n */\r\nsetTimeout(() => {\r\n    const winHeight = window.innerHeight\r\n    const bodyHeight = document.body.offsetHeight\r\n    document.body.style.transform = `scaleY(${winHeight/bodyHeight})`\r\n    document.body.style.overflow = 'hidden'\r\n}, 1000)\r\n\r\nconst rows = 15\r\nconst columns = 18\r\nconst boardWidth = window.innerWidth > 600 ? 600 : window.innerWidth\r\nconst cellWidth = boardWidth / rows\r\nconst boardHeight = cellWidth * columns\r\nconst snakeHead = '7-7' // let a mid cell be the head\r\nconst frequency = 700  // 1 move per frequency ms\r\n\r\nconst actionTypes = {\r\n    CHANGE_DIRECTION: \"CHANGE_DIRECTION\",\r\n    MOVE: \"MOVE\",\r\n    TOGGLE_PAUSE: \"TOGGLE_PAUSE\"\r\n}\r\n\r\n/**\r\n * The board will consists of rows*columns number of cells \r\n * where the snake can move to\r\n */\r\nconst cells = (() => {\r\n    const cells = {}\r\n    for (let y = 1; y <= columns; y++) {\r\n        for(let x = 1; x <= rows; x++) {\r\n            const id = y + '-' + x\r\n            let cell = { \r\n                x, y, id,\r\n                top: (y-1)*cellWidth,\r\n                left: (x-1)*cellWidth\r\n            }\r\n            cells[id] = cell\r\n        }\r\n    }\r\n    return cells\r\n})()\r\n\r\nconst DIRECTION = {\r\n    LEFT: 'left', RIGHT: 'right', UP: 'up', DOWN: 'down'\r\n}\r\n\r\n// NO BACK TURN\r\nconst ALLOWED_TURNS = {\r\n    [DIRECTION.LEFT]: [DIRECTION.UP, DIRECTION.DOWN],\r\n    [DIRECTION.RIGHT]: [DIRECTION.UP, DIRECTION.DOWN],\r\n    [DIRECTION.UP]: [DIRECTION.LEFT, DIRECTION.RIGHT],\r\n    [DIRECTION.DOWN]: [DIRECTION.LEFT, DIRECTION.RIGHT]\r\n}\r\n\r\nconst initState = {\r\n    snake: [snakeHead, '7-6', '7-5'],\r\n    direction: DIRECTION.RIGHT,\r\n    food: '3-5',\r\n    isAlive: true,\r\n    isPaused: false,\r\n}\r\n\r\n/**\r\n * Reducer function for useReducer hook\r\n * @param {*} state \r\n * @param {*} action \r\n */\r\nconst reducer = (state, action) => {\r\n    const { type, payload } = action\r\n    \r\n    switch(type) {\r\n        case actionTypes.CHANGE_DIRECTION: {\r\n            if(!state.isAlive || state.isPaused) return state\r\n            return {\r\n                ...state,\r\n                direction: payload\r\n            }\r\n        }\r\n        case actionTypes.MOVE: {\r\n            if(!state.isAlive || state.isPaused) return state\r\n            const headCell = cells[state.snake[0]]\r\n            let { x, y } = headCell\r\n            let { direction, food } = state\r\n\r\n            if (direction === DIRECTION.LEFT) {\r\n                x = x > 1 ? --x : rows\r\n            }\r\n            else if (direction === DIRECTION.RIGHT) {\r\n                x = x < rows ? ++x : 1\r\n            }\r\n            else if (direction === DIRECTION.UP) {\r\n                y = y > 1 ? --y : columns\r\n            }\r\n            else if (direction === DIRECTION.DOWN) {\r\n                y = y < columns ? ++y : 1\r\n            }\r\n\r\n            const newHeadCellID = y + '-' + x\r\n            const newSnake = [...state.snake]\r\n\r\n            // Death Check\r\n            if(newSnake.includes(newHeadCellID)) {\r\n                alert('Hey you KILLED the snake :P ')\r\n                return {\r\n                    ...state,\r\n                    isAlive: false\r\n                }\r\n            }\r\n\r\n            // remove 1 snake-body from end of array\r\n            // but dont remove if it is a Food, let it grow...\r\n            // and add newHead at the begining of array\r\n            if(newHeadCellID === food) {\r\n                food = ''   // need to create a food here\r\n                food = getAnEmptyCellID(Object.keys(cells), newSnake)\r\n            }\r\n            else {\r\n                newSnake.pop()\r\n            }\r\n            \r\n            newSnake.unshift(newHeadCellID)\r\n\r\n            return {\r\n                ...state,\r\n                snake: newSnake,\r\n                food\r\n            }\r\n        }\r\n        case actionTypes.TOGGLE_PAUSE: {\r\n            return {\r\n                ...state,\r\n                isPaused: !state.isPaused\r\n            }\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\n/**\r\n * This function will receive 2 arrays and it has to give\r\n * any 1 value that is in 1st array but not in 2nd array\r\n * @param {string[]} allCells | array of IDs\r\n * @param {string[]} occupiedCells | array of IDs\r\n */\r\nfunction getAnEmptyCellID (allCells, occupiedCells) {\r\n    let emptyID = ''\r\n\r\n    do {\r\n        let randomIndex = Math.floor(Math.random() * allCells.length)\r\n        emptyID = allCells[randomIndex]\r\n    } \r\n    while(occupiedCells.includes(emptyID))\r\n\r\n    return emptyID\r\n}\r\n\r\n\r\nconst Game = props => {\r\n    const [gameState, dispatch] = useReducer(reducer, initState)\r\n\r\n    const gameLoop = useCallback(() => {\r\n        if(!gameState.isAlive) return\r\n        dispatch({ type: actionTypes.MOVE })\r\n        setTimeout(gameLoop, frequency)\r\n    }, [gameState.isAlive])\r\n\r\n    useEffect(() => {\r\n        gameLoop()\r\n    }, [gameLoop])\r\n\r\n    /**\r\n     * When player clicks on direction button,\r\n     * Check if that direction is allowed,\r\n     * then Dispatch it...\r\n     * \r\n     * Debounce this function call\r\n     * @param {*} direction \r\n     */\r\n    const move = _.throttle(direction => {\r\n        // check if requested trun is allowed\r\n        if(ALLOWED_TURNS[gameState.direction].includes(direction)) {\r\n            dispatch({ \r\n                type: actionTypes.CHANGE_DIRECTION,\r\n                payload: direction\r\n            })\r\n        }\r\n    }, frequency)\r\n\r\n    const moveUp = () => move(DIRECTION.UP)\r\n    const moveDown = () => move(DIRECTION.DOWN)\r\n    const moveLeft = () => move(DIRECTION.LEFT)\r\n    const moveRight = () => move(DIRECTION.RIGHT)\r\n    const togglePause = () => dispatch({ type: actionTypes.TOGGLE_PAUSE })\r\n\r\n    return (\r\n        <div className=\"gamepage\">\r\n            <div className=\"board\" \r\n                style={{ width: boardWidth, height: boardHeight }}\r\n                onClick={togglePause}\r\n            >\r\n                {\r\n                    Object.values(cells).map(c => \r\n                    <div \r\n                        data-id={c.id}\r\n                        key={c.id} \r\n                        style={{\r\n                            top: c.top, \r\n                            left: c.left, \r\n                            width: cellWidth, \r\n                            height: cellWidth\r\n                        }} \r\n                        className={clsx(\r\n                            'cell', \r\n                            gameState.snake.includes(c.id) && 'snake-body',\r\n                            gameState.snake[0] === c.id && 'snake-head',\r\n                            gameState.food === c.id && 'food'\r\n                        )}\r\n                    ></div>)\r\n                }\r\n                \r\n                <GamePad \r\n                    moveUp={moveUp}\r\n                    moveDown={moveDown}\r\n                    moveLeft={moveLeft}\r\n                    moveRight={moveRight}\r\n                />\r\n                <span className=\"status\">Snake Size: {gameState.snake.length}</span>\r\n            </div>\r\n            <ButtonPanel \r\n                togglePause={togglePause}\r\n                isPaused={gameState.isPaused}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import React from 'react';\nimport './App.css';\nimport Game from './components/pages/game/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Snake-n-Snack</h1>\n      <p className=\"subheader\">Hey player, our snake here really loves eating snacks. Lets not keep it hungry, ok ?</p>\n      <Game />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}